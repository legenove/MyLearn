#encoding = utf-8
import threading
from redis_test import Redis
#from django.conf import settings
#memcache_settings = settings.memcache_settings
#redis_settings = settings.redis_settings
#import setting
#from settings import memcache_settings,redis_settings
from mysetting import settings
import logging
try:
    redis_settings = settings.redis_settings
except:
    redis_settings = {
    "REDIS_BACKEND": {"servers": 'localhost', "port": 6379, "db": 11, 'password':''},
    "MQUEUE_BACKEND": {"servers": 'localhost', "port": 6379, "db": 12, 'password':''},
    "Redis_Source_Use_MongoDB": False  #if redis down use mongodb
    }


class RedisClient(object):
    instance = None
    locker = threading.Lock()

    def __init__(self):
        """ intialize the client of redis  include port db and servers """
        try:
            config = redis_settings["REDIS_BACKEND"]
            self.servers = config["servers"]
            self.port = config["port"]
            self.db = config["db"]
            self.password = config["password"]
            #r = redis.Redis('10.66.136.84', '6379', 0,password="xsw2CDE#vfr4")
            #r = redis.Redis('10.66.136.84', '6379', 0)
            self.redis = Redis(self.servers, self.port, self.db,password=self.password,socket_timeout=1)
        except Exception, e:
            print "Redis YAMLConfig Error :", e
            logging.error(e)

        

    @classmethod
    def getInstance(klass):
        """
        get the instance of RedisClient
        return:
            the redis client
        """
        klass.locker.acquire()
        try:
            if not klass.instance:
                klass.instance = klass()
            return klass.instance
        finally:
            klass.locker.release()

    def reconnect(self):
        """
        if the connetion is disconnet  then connect again
        """
        try:
            self.redis = Redis(self.servers, self.port, self.db)
        except Exception, e:
            print e


class RQueueClient(RedisClient):
    instance = None

    def __init__(self):
        """ intialize the client of redis  include port db and servers """
        try:
            config = redis_settings["MQUEUE_BACKEND"]
            #print config
            self.servers = config["servers"]
            self.port = config["port"]
            self.db = config["db"]
            self.password = config["password"]
            self.redis = Redis(self.servers, self.port, self.db,password=self.password)
        except Exception, e:
            print "Redis YAMLConfig Error :", e
            logging.error(e)